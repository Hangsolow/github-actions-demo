name: Run Azure Login with OIDC
on:
  push:
    branches:
      - "test/*"
permissions:
  id-token: write
  contents: read
env:
  AZURE_STORAGE_AUTH_MODE: login
  AZURE_STORAGE_ACCOUNT: frontenddeployments
  AZ_VERSION: latest
  PARTITION_KEY: test
  TABLE_NAME: deployments
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: test
      url: https://test.await.io
    steps:
      - name: Cache docker image
        id: image-cache
        uses: actions/cache@v3
        with:
          path: image-cache
          # Adjust key to meet your cache time requirements e.g.
          # ${{ hashFiles(*) }} can be useful here to invalidate
          # cache on file changes
          key: image-cache-${{ runner.os }}
      - if: steps.image-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p image-cache
          docker pull mcr.microsoft.com/azure-cli:latest
          docker save -o image-cache/azure-cli.tar mcr.microsoft.com/azure-cli:latest

      - if: steps.image-cache.outputs.cache-hit == 'true'
        run: docker load -i ~/image-cache/azure-cli.tar

      - name: Az CLI login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Checkout
        uses: actions/checkout@v3
      - name: Get current version
        uses: azure/CLI@v1
        with:
          azcliversion: ${{ env.AZ_VERSION }}
          inlineScript: |
            currentVersion=$(az storage entity show --partition-key ${{ env.PARTITION_KEY }} --row-key current --table-name ${{ env.TABLE_NAME}} --query Version)
            echo "CURRENT_VERSION=$currentVersion" >> "$GITHUB_ENV"
      - name: Set next version
        shell: pwsh
        run: |
          $currentVersion = ${{ env.CURRENT_VERSION }}
          $versionObj = [System.Version]::Parse($currentVersion)
          $nextVersion = "$($versionObj.Major).$($versionObj.Minor).$($versionObj.Build + 1)"
          echo "NEXT_VERSION=$nextVersion" >> $env:GITHUB_ENV
      - name: Azure CLI script
        uses: azure/CLI@v1
        with:
          azcliversion: ${{ env.AZ_VERSION }}
          inlineScript: |
            az storage blob upload-batch --destination test/project-helios/${{ env.NEXT_VERSION }} --source src/frontend/dist
            az storage entity insert --table-name ${{ env.TABLE_NAME }} --entity PartitionKey=${{ env.PARTITION_KEY }} RowKey=${{ env.NEXT_VERSION }} Version=${{ env.NEXT_VERSION }} Timestamp=${{ github.event.repository.updated_at }} Timestamp@odata.type=Edm.DateTime
            az storage entity replace --table-name ${{ env.TABLE_NAME }} --entity PartitionKey=${{ env.PARTITION_KEY }} RowKey=current Version=${{ env.NEXT_VERSION }} Timestamp=${{ github.event.repository.updated_at }} Timestamp@odata.type=Edm.DateTime
