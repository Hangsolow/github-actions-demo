name: Deployment Workflow
run-name: Deploy 
on: 
  workflow_call:
    inputs:
      azure_storage_account:
        type: string
        description: the azure storage account
        required: true 
      table_name:
        type: string
        description: The table name
        default: deployments
      environment:
        type: string
        required: true
      project_name:
        type: string
        description: The project name used for deployment, will default to repo name
        default: ${{ github.event.repository.name }}
      dist_folder_path:
        type: string
        description: The path to the frontend Dist folder to deploy, will default to  'src/frontend/dist'
        default: src/frontend/dist
      deployment_artifact_name:
        type: string
        description: the name of the artifact to deploy
        default: frontend-dist
      override_version:
        type: string
        description: The version to use when deploying, will override the version from table
      seed_version:
        type: string
        description: if there is no current row in the table then this version will be used, default is '1.0.0'
        default: '1.0.0'
    outputs:
      next_version: 
        value: ${{ jobs.deploy.outputs.next_version }}
#
permissions:
  id-token: write
  contents: read

env:
  AZURE_STORAGE_AUTH_MODE: login
  AZURE_STORAGE_ACCOUNT: ${{ inputs.azure_storage_account }}
  AZ_VERSION: latest
  ENVIRONMENT: ${{ inputs.environment }}
  TABLE_NAME: ${{ inputs.table_name }}
  BLOB_FOLDER: ${{ inputs.project_name }}
  DIST_FOLDER_PATH: ${{ inputs.dist_folder_path }}
  OVERRIDE_VERSION: ${{ inputs.override_version }}
  #these are placeholders for env variables that are being set in steps, here for the autocomplete
  NEXT_VERSION:
  CURRENT_VERSION:
  VERSION_INCR_FUNC:
jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: 
      name: ${{ inputs.environment }}
      url: ${{ vars.ENVIRONMENT_URL }}  
    outputs:
      next_version: ${{ steps.version.outputs.next_version || steps.override_version.outputs.next_version }}
    steps:
      - name: Download dist
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.deployment_artifact_name }}
          path: ${{ env.DIST_FOLDER_PATH }}
      - name: Az CLI login
        uses: azure/login@v1
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      - name: Get current version
        #only run if an override_version is not given
        if: ${{ !inputs.override_version }}
        uses: azure/CLI@v1
        with:
          azcliversion: ${{ env.AZ_VERSION }}
          inlineScript: |
            currentVersion=$(az storage entity show --partition-key ${{ env.ENVIRONMENT }} --row-key current --table-name ${{ env.TABLE_NAME}} --query Version)
            echo "CURRENT_VERSION=$currentVersion" >> "$GITHUB_ENV"
      - name: Use seed version
        #only run if both current version and override version is missing
        if: ${{ !env.CURRENT_VERSION && !inputs.override_version }}
        run: echo "OVERRIDE_VERSION=${{ inputs.seed_version }}" >> "$GITHUB_ENV"
      - name: Increment Minor version
        if: ${{ inputs.environment == 'prod' }}
        run: echo 'VERSION_INCR_FUNC=$($versionObj.Major).$($versionObj.Minor + 1).$($versionObj.Build)' >> $GITHUB_ENV
      - name: Increment Build version
        if: ${{ inputs.environment != 'prod' }}
        run: echo 'VERSION_INCR_FUNC=$($versionObj.Major).$($versionObj.Minor).$($versionObj.Build + 1)' >> $GITHUB_ENV
      - name: Generate next version
        #only run if an override_version is not given
        if: ${{ !env.OVERRIDE_VERSION }}
        id: version
        shell: pwsh
        run: |
          $currentVersion = ${{ env.CURRENT_VERSION }}
          $versionObj = [System.Version]::Parse($currentVersion)
          $nextVersion = "${{ env.VERSION_INCR_FUNC }}"
          echo "NEXT_VERSION=$nextVersion" >> $env:GITHUB_ENV
          echo "next_version=$nextVersion" >> $env:GITHUB_OUTPUT
      - name: Set override version
        #only run if an override_version is given
        if: ${{ env.OVERRIDE_VERSION }}
        id: override_version
        shell: pwsh
        run: |
          echo "NEXT_VERSION=${{ env.OVERRIDE_VERSION }}" >> $env:GITHUB_ENV
          echo "next_version=${{ env.OVERRIDE_VERSION }}" >> $env:GITHUB_OUTPUT
      - name: Deploy artifact to azure storage
        uses: azure/CLI@v1
        with:
          azcliversion: ${{ env.AZ_VERSION }}
          inlineScript: |
            az storage blob upload-batch --destination ${{ env.ENVIRONMENT }}/${{ env.BLOB_FOLDER }}/${{ env.NEXT_VERSION }} --source ${{ env.DIST_FOLDER_PATH }}
            az storage entity insert --table-name ${{ env.TABLE_NAME }} --entity PartitionKey=${{ env.ENVIRONMENT }} RowKey=${{ env.NEXT_VERSION }} Version=${{ env.NEXT_VERSION }} Timestamp=${{ github.event.repository.updated_at }} Timestamp@odata.type=Edm.DateTime
            az storage entity replace --table-name ${{ env.TABLE_NAME }} --entity PartitionKey=${{ env.ENVIRONMENT }} RowKey=current Version=${{ env.NEXT_VERSION }} Timestamp=${{ github.event.repository.updated_at }} Timestamp@odata.type=Edm.DateTime
